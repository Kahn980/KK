# -*- coding: utf-8 -*-
"""game

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rcEekC4HYDqrm7WfSUb6YHvsDxLuFRzq

# 🎉 Welcome to a **Pleasant, Friendly Journey** with **Python AI Coding** 🚀  

**We will explore Python, AI, and Prompt Engineering** together through this tutorial! It is for all levels of coding experience.

**This is Google Colab,** which is a free cloud-based Jupyter Notebook environment that allows you to write and execute Python code in your browser. No installation is required.

We will go through 10 exercises - Each exercise has:  
1. **An example** - Just run the first code cell (**Shift + Enter**) and see what happens.  
2. **A small task** - Modify the code to learn more.  

**There will also be a challenge** at the very end for a potential to gain a more hands-on experience. ⛽

💡 **Tip:** If you get stuck, ask **ChatGPT** for help! We've included example prompts you can use. 😃  


Happy Coding! 🚀

## **Exercise 1: Python Says Hello! 🤖**  
### **👀 Try this first!**  
_(Press **Shift + Enter** to see what happens!)_  
📝 **What does this cell do?**  
It prints a simple greeting message. Let's see what AI says!
"""

# This code prints a greeting message
print("Hello, world! I am AI. 🚀")

"""## **Task 1: Personalize the Greeting**
Change `"world"` to **your name** and run the cell again!  
(Press **Shift + Enter** to see the new greeting.)  

💡 **Ask ChatGPT:**  
*"Give me the Python code that prints a greeting with my name in it."*

"""

# Paste your code here
print("Hello, Yuning! I am AI. 🚀")

"""## **Exercise 2: Python Counts for You! 🔢**  
### **👀 Try this first!**  
_(Press **Shift + Enter** to see what AI prints!)_  
📝 **What does this cell do?**  
It prints numbers from **1 to 5** using a loop.  

"""

# This code prints numbers from 1 to 5 using a loop
for i in range(1, 6):
    print(i)

"""## **Task 2: Count Higher!**
Change the **range** so AI counts from **1 to 10** instead of **1 to 5**.  
Run the new code with **Shift + Enter**.  

💡 **Ask ChatGPT:**  
*"Give me the Python code that prints numbers from 1 to 10 in a loop."*

"""

# Your turn! Modify this to count to 10
for i in range(1,10):
    print(i)

"""## **Exercise 3: Python Writes a Poem! 📝**  
### **👀 Try this first!**  
_(Press **Shift + Enter** to read a short poem!)_  
📝 **What does this cell do?**  
It prints a fun, AI-generated poem! 🎨  

"""

# AI generates a simple poem
poem = """
Roses are red,
Violets are blue,
AI loves coding,
And so do you! 😊
"""
print(poem)

"""## **Task 3: Make Python Write a Different Poem**
Change some words in the poem to create your own version.  
Then press **Shift + Enter** to see your new poem!  

💡 **Ask ChatGPT:**  
*"Give me the Python code that prints a short poem about space and the stars."*

"""

poem = """
Twinkling stars in endless night,
Scattered gems of silver light.
Galaxies swirl in cosmic dance,
A universe of vast expanse.

Planets drift in silent grace,
Orbiting suns in time and space.
Mysteries deep, both near and far,
Dreams are born where stardust are.
"""

print(poem)

"""## **Exercise 4: Python Plays Rock-Paper-Scissors! ✊🖐✌️**  
### **👀 Try this first!**  
_(Press **Shift + Enter** and see what AI picks!)_  
📝 **What does this cell do?**  
It makes AI **randomly pick** Rock, Paper, or Scissors. Run it a few times! 🎲  

"""

import random

# AI randomly picks Rock, Paper, or Scissors
options = ["Rock", "Paper", "Scissors"]
ai_choice = random.choice(options)
print("AI picked:", ai_choice)

"""## **Task 4: Play Rock-Paper-Scissors**
Try running the code **a few times** with **Shift + Enter** and see what AI picks!  
Want to **play against AI?** Modify the code to add **user input**!  

💡 **Ask ChatGPT:**  
*"Give me the Python code that is a much more fun version of Rock-Paper-Scissors and that adds some nice colors and visuals and that allows me to play with it. Do not require any additional libraries"*

"""

# Your code here
import random

# AI randomly picks Rock, Paper, or Scissors
options = ["Rock", "Paper", "Scissors"]
ai_choice = random.choice(options)
print("AI picked:", ai_choice)

"""## **Exercise 5: Python Draws a Spiral! 🌀**  
### **👀 Try this first!**  
_(Press **Shift + Enter** to see AI draw a spiral!)_  
📝 **What does this cell do?**  
It uses **math and code** to draw a spiral using Matplotlib! 🎨  

"""

import numpy as np
import matplotlib.pyplot as plt

# AI generates a simple spiral
theta = np.linspace(0, 4 * np.pi, 100)
r = np.linspace(0, 10, 100)
x = r * np.cos(theta)
y = r * np.sin(theta)

plt.plot(x, y)
plt.title("AI's Spiral")
plt.show()

"""## **Task 5: Change the Spiral Shape**
Try changing `4 * np.pi` to **6 * np.pi** in the code above.  
What happens to the spiral? 🎨  

💡 **Ask ChatGPT:**  
*"Give me the Python code that plots the shape of a heart. Do not require any additional libraries"*

"""

# your code here
import numpy as np
import matplotlib.pyplot as plt

# AI generates a simple spiral
theta = np.linspace(0, 6 * np.pi, 100)
r = np.linspace(0, 10, 100)
x = r * np.cos(theta)
y = r * np.sin(theta)

plt.plot(x, y)
plt.title("AI's Spiral")
plt.show()

"""-----------------------
## **🎉 Great Work! 🎉 You've completed 5 fun AI-powered Python exercises!** 🚀

Now that you've practiced Python coding, let's dive into **Prompt Engineering**, the art of designing effective prompts to get the best responses from AI models!  

## **What is Prompt Engineering?**  
Prompt engineering is the process of crafting input prompts to guide AI models in generating more **useful, structured, and accurate** outputs.

By **adjusting the way you phrase your request**, you can **improve AI responses** dramatically!  

### **🛠 What We'll Learn:**  
✅ Using **Together.AI** to access **LLaMA** and other models  
✅ Applying **prompting strategies** like **Chain of Thought (CoT)**, **structured outputs**, and **system instructions**  
✅ **Experimenting with different prompts** to improve AI-generated responses  

### **⚡ Using LLaMA via Together.AI**  
We'll use the **Together.AI API** to query LLaMA models.

---

## 👀 Define a Function for Prompting LLaMA 🦙

### 📝 What does this cell do?

- This code creates a function for us that makes it easy for us to interact with Llama.

- Llama is a large language model much like ChatGPT
"""

# Define the Function
try:
    import together
except ImportError:
    !pip install -q together

from together import Together

client = Together(api_key="9806a2601560024637df1e4acd804862faa67e08637db6598d920b64eebba43e")

def prompt_llm(prompt):
    response = client.chat.completions.create(
        model="meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo-128K",
        messages=[{"role": "user", "content": prompt}],
    )
    return response.choices[0].message.content

print("LLM Ready!")

"""## **Exercise 6: Using Together.AI with LLaMA 🦙**  
### **👀 Try this first!**  
_(Press **Shift + Enter** to test the AI response!)_  
📝 **What does this cell do?**  
It asks **LLaMA** a question about Python for AI development.  

"""

response = prompt_llm("""
What are the key benefits of learning Python for AI development?

in 3 bullet points one sentence each
""")
print(response)

"""## **Task 6: Modify the Prompt**
Ask the AI about something completely unrelated to Python (e.g., **travel tips, cooking, history, or music**).  

"""

response = prompt_llm("""
What's the five most expensive steekhouse in vancouver?
in 5 bullet points one sentence each
""")
print(response)

"""## **Exercise 7: Chain of Thought (CoT) Reasoning 🧠**  
### **👀 Try this first!**  
_(Press **Shift + Enter** to see step-by-step reasoning in action!)_  
📝 **What does this cell do?**  
It instructs LLaMA to **think step-by-step** before answering a math problem.  

"""

response = prompt_llm("""
I have 12 apples. I give away 4 to my friend,
and then I buy 6 more. How many apples do I have now?
""")
print(response)

"""## **Task 7: Modify the Prompt**
Ask the AI to **explain a complex topic step by step** (e.g., how airplanes fly, how the stock market works, or how computers process data).  

"""

# Your turn! Modify the prompt for a step-by-step explanation
response = prompt_llm("How the stock market works？")  # Change this prompt!
print(response)

"""## **Exercise 8: Structured Output Formatting 📑**  
### **👀 Try this first!**  
_(Press **Shift + Enter** to generate a structured response!)_  
📝 **What does this cell do?**  
It asks LLaMA to return a **structured JSON output** instead of plain text.  

"""

response = prompt_llm(
    """Provide a structured JSON response listing three famous AI models, including their name, developer, and release year.
    Format the response like this:
    {
      "models": [
        {"name": "GPT-4", "developer": "OpenAI", "year": 2023},
        {"name": "LLaMA-2", "developer": "Meta", "year": 2023}
      ]
    }
    """
)
print(response)

"""## **Task 8: Modify the Prompt**
Ask the AI to return structured JSON data about a **different topic** (e.g., famous landmarks, programming languages, or historical events).  

"""

response = prompt_llm(
    """Provide three presidents including their name, and their biggest impact, and birthday and
    how  we shouldn't vote with a justification why we shouldn't
    Format the response like this:
    - name:
    - impact:
    - birthday:
    - should we vote:
    """
)
print(response)

"""## **Exercise 9: System Instructions for Better Responses 🎯**  
### **👀 Try this first!**  
_(Press **Shift + Enter** to see the AI follow a specific instruction!)_  
📝 **What does this cell do?**  
It **sets a system role** so AI acts as a historian when answering.  

"""

response = prompt_llm("""You are a historian specializing in ancient civilizations.

 Answer the following question in a detailed and informative way:\n
 What were the key innovations of Ancient Egypt?
 """)
print(response)

"""## **Task 9: Modify the Prompt**
Make the AI act as a **different expert** (e.g., a **doctor**, **engineer**, or **travel guide**) and ask it a relevant question.  

"""

response = prompt_llm("""You are a doctor specializing in brain surgery.

 give me the steps i need to perform to do that surgery which i need to do 5 minutes
 using only my kitchen utensils, urgent
 """)
print(response)

"""## **Exercise 10: Few-Shot Learning with Examples 🎓**  
### **👀 Try this first!**  
_(Press **Shift + Enter** to see the AI learn from examples!)_  
📝 **What does this cell do?**  
It **provides examples** before asking LLaMA to generate a similar response.  

"""

response = prompt_llm(
    """Here are some fun ways to get money:
    1. selling good  news.
    2. earning.
    3. printing money with  government approval.

    Now, generate three ways i can get promoted at a company.
    """
)
print(response)

"""## **Task 10: Modify the Prompt**
Change the examples to make AI generate **fun facts about animals** instead of oceans.  

"""

# Your turn! Modify the prompt to use different examples
response = prompt_llm(
    """Here are some fun facts about oceans:
   1. The Pacific Ocean is the largest ocean on Earth, covering more than 30% of the planet's surface.
   2. The ocean is home to nearly 80% of all life on Earth, yet over 80% of it remains unexplored.
   3. The Mariana Trench in the Pacific Ocean is the deepest point on Earth, reaching over 36,000 feet (11,000 meters) deep.

    Now, generate three fun facts about animals.
    """
)
print(response)

"""### 🎉 **Awesome Work!** 🎉  
You've explored **Prompt Engineering with LLaMA via Together.AI!** 🚀  
✅ Queried LLaMA for AI responses  
✅ Used **Chain of Thought** reasoning  
✅ Generated **structured outputs**  
✅ Set **system instructions**  
✅ Used **Few-Shot Learning**  

💡 **Keep experimenting!** Modify prompts, try different AI models, and ask ChatGPT for more ideas! 😃

# 🎯 **Final Challenge: Build a Trivia App with Together.AI!** 🎉

### **Your Mission:**  
Create a **Trivia Game** that asks the user a random question and checks if they got it right! 🏆  

### **What You’ll Need to Do:**  
1. **Use Together.AI** to generate trivia questions.  
2. **Get the user’s answer** using Python's `input()` function.  
3. **Check if the answer is correct.**  
4. **Keep score** and play multiple rounds!  

---

## **👀 Example:**
### ✅ AI asks: _"What is the capital of France?"_
#### 🎯 User types: `"Paris"`
### ✅ AI replies: _"Correct! 🎉"_  
#### ❌ If wrong, AI says: _"Oops! The correct answer was Paris."_

---

## **How to Get Started?**
💡 **Ask ChatGPT for help!**  
Try these prompts to build your Trivia Game:  
- _"Give me the Python code to generate trivia questions using Together.AI."_  
- _"How do I check if a user’s answer is correct in Python?"_  
- _"How can I keep score in a trivia game using Python?"_  

---

## **🚀 Now, it's your turn!**
Modify the empty code below to build your **own AI-powered Trivia Game!** 🎮
"""

# Your TRIVIA APP CODE HERE
# Define the Function
try:
    import together
except ImportError:
    !pip install -q together

from together import Together

client = Together(api_key="0fb64b4fdbb8677ac60157c5053f02c8393dedc7ac130a62e420f09058c70435")

def generate_trivia_question():
    """
    Use Together.AI to generate a trivia question and its correct answer.
    """
    prompt = """Generate a random trivia question and its correct answer.
    Format the response as a JSON object like this:
    {
      "question": "What is the full name of the current president of the United States",
      "answer": "Donald Trump"
    }
    """
    response = client.chat.completions.create(
        model="meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo-128K",
        messages=[{"role": "user", "content": prompt}],
        temperature=1,
    )
    # Extract the JSON response
    try:
        trivia = eval(response.choices[0].message.content)
        return trivia["question"], trivia["answer"]
    except:
        return "What is the capital of France?", "Paris"


def trivia_game():
    """
    Run the trivia game.
    """
    print("Welcome to the Trivia Game! 🎉")
    score = 0
    rounds = 0

    while True:
        # Generate a trivia question
        question, correct_answer = generate_trivia_question()
        print(f"\nQuestion: {question}")

        # Get the user's answer
        user_answer = input("Your answer: ").strip()

        # Check if the answer is correct
        if user_answer.lower() == correct_answer.lower():
            print("✅ Correct! 🎉")
            score += 1
        else:
            print(f"❌ Incorrect! The correct answer is: {correct_answer}")

        rounds += 1

        # Ask if the user wants to play again
        play_again = input("\nDo you want to play another round? (yes/no): ").strip().lower()
        if play_again != "yes":
            break

    # Display final score
    print(f"\nGame Over! 🏆 Your final score is: {score}/{rounds}")

# Run the trivia game
trivia_game()